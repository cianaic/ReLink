rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    function isAdmin() {
      return request.auth.uid == 'VGKFRWqEzyQMor0Xg4qvAyEWivA3';
    }

    function isAuthenticated() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    match /friends/{friendId} {
      // Allow users to read friend records where they are either the user or the friend
      allow read: if isAuthenticated() && (
        request.auth.uid == resource.data.userId ||
        request.auth.uid == resource.data.friendId
      );
      
      // Allow users to create friend records where they are the user
      allow create: if isAuthenticated() && 
        request.resource.data.userId == request.auth.uid;
      
      // Allow users to update or delete friend records where they are either the user or the friend
      allow update, delete: if isAuthenticated() && (
        request.auth.uid == resource.data.userId ||
        request.auth.uid == resource.data.friendId
      );
    }

    match /users/{userId} {
      // Allow anyone to read basic profile info
      allow read: if true;
      
      // Allow users to write their own data and update friend-related arrays, or admin to write any user data
      allow write: if request.auth != null && (
        request.auth.uid == userId ||
        isAdmin() ||
        (request.method == 'update' && 
          (
            'pendingRequests' in request.resource.data ||
            'sentRequests' in request.resource.data ||
            'connections' in request.resource.data
          )
        )
      );
    }
    
    match /connections/{connectionId} {
      // Allow users to read connections they're part of
      allow read: if request.auth != null && 
        (request.auth.uid in resource.data.users);
      
      // Allow users to create new connections if they're the sender
      allow create: if request.auth != null && 
        request.resource.data.users is list && 
        request.resource.data.senderId == request.auth.uid;
      
      // Allow users to update connections they're part of
      allow update: if request.auth != null && 
        resource.data.users is list && 
        request.auth.uid in resource.data.users;
      
      // Allow users to delete connections they're part of
      allow delete: if request.auth != null && 
        resource.data.users is list && 
        request.auth.uid in resource.data.users;
    }
    
    match /activities/{activityId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
      allow update, delete: if request.auth != null && (resource.data.userId == request.auth.uid || isAdmin());
    }
    
    match /relinks/{document} {
      function isConnected() {
        return exists(/databases/$(database)/documents/connections/{connectionId}) 
          where connectionId in get(/databases/$(database)/documents/users/$(request.auth.uid)).data.connections;
      }
      
      allow read: if request.auth != null && (
        resource.data.userId == request.auth.uid || // Own posts
        resource.data.userId in get(/databases/$(database)/documents/users/$(request.auth.uid)).data.connections // Friend's posts
      );
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
      allow update, delete: if request.auth != null && (
        resource.data.userId == request.auth.uid || 
        resource.data.authorId == request.auth.uid || 
        isAdmin()
      );
    }
    
    match /shared_relinks/{document} {
      allow read: if request.auth != null;
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
      // Allow users to modify their own posts or admin to modify any post
      allow update, delete: if request.auth != null && (
        resource.data.userId == request.auth.uid || 
        resource.data.authorId == request.auth.uid || 
        isAdmin()
      );
    }
    
    match /links/{linkId} {
      allow read: if isAuthenticated() && request.auth.uid == resource.data.userId;
      allow create: if isAuthenticated() && request.auth.uid == request.resource.data.userId;
      allow update, delete: if isAuthenticated() && request.auth.uid == resource.data.userId;
    }
    
    match /{document=**} {
      allow read, write: if false;
    }
  }
}